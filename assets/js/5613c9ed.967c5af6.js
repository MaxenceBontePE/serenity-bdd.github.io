"use strict";(self.webpackChunkserenity_users_guide=self.webpackChunkserenity_users_guide||[]).push([[5627],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),g=u(n),d=i,m=g["".concat(l,".").concat(d)]||g[d]||c[d]||a;return n?r.createElement(m,o(o({ref:t},p),{},{components:n})):r.createElement(m,o({ref:t},p))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var u=2;u<a;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},4858:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=n(7462),i=(n(7294),n(3905));const a={id:"filtering_reports",title:"Filtering Execution and Reports with Tags",sidebar_position:3},o=void 0,s={unversionedId:"reporting/filtering_reports",id:"reporting/filtering_reports",isDocsHomePage:!1,title:"Filtering Execution and Reports with Tags",description:"Serenity BDD makes it easy to get both a broad overview of your test results and functional coverage.",source:"@site/docs/reporting/filtering-reports.md",sourceDirName:"reporting",slug:"/reporting/filtering_reports",permalink:"/docs/reporting/filtering_reports",editUrl:"https://github.com/serenity-bdd/serenity-bdd.github.io/blob/master/docs/reporting/filtering-reports.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"filtering_reports",title:"Filtering Execution and Reports with Tags",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Living Documentation",permalink:"/docs/reporting/living_documentation"},next:{title:"Additional Reports",permalink:"/docs/reporting/additional_reports"}},l=[{value:"Running Scenarios by tags",id:"running-scenarios-by-tags",children:[]},{value:"Excluding Unrelated Requirements",id:"excluding-unrelated-requirements",children:[]}],u={toc:l};function p(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Serenity BDD makes it easy to get both a broad overview of your test results and functional coverage.\nBut when working with large test suites, it is often useful to be able to focus on specific functional areas of the application when reporting results.\nFor example, you may want to view only the results for the tests related to the current release, or to a specific functional area."),(0,i.kt)("p",null,"In Serenity BDD, you can use tags to generate this kind of focused report."),(0,i.kt)("p",null,"This works very naturally with Cucumber test scenarios. For example, in the following feature file, we have used the ",(0,i.kt)("inlineCode",{parentName:"p"},"@sprint-2")," tag to indicate that the scenario is scheduled for Sprint 2."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-gherkin"},"@sprint-2\nScenario: Buyer orders a coffee\n  Given Cathy has a Caffeinate-Me account\n  When she orders a large cappuccino\n  Then Cathy should receive the order\n")),(0,i.kt)("p",null,"Tagging also works with JUnit test, as illustrated here:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'@RunWith(SerenityRunner.class)\npublic class WhenAddingNumbers {\n\n    @Steps\n    MathWizSteps michael;\n\n    @Test\n    @WithTag("release:sprint-2")\n    public void addingSums() {\n        // Given\n        michael.startsWith(1);\n\n        // When\n        michael.adds(2);\n\n        // Then\n        michael.shouldHave(3);\n    }\n\n    @WithTagsValuesOf({"Reporting", "release:sprint-3"})\n    public void testWithMultipleTags() {\n    }\n}\n')),(0,i.kt)("h2",{id:"running-scenarios-by-tags"},"Running Scenarios by tags"),(0,i.kt)("p",null,'Tags are also a great way to help organize test execution.\nFor example, you might want to flag all of the web services tests, or mark certain tests to run against Internet Explorer browser only.\nWith JUnit tests, this can be achieved by providing a single tag or an "or" separated list of tags from command line.\nIf provided, only classes and/or methods with tags in this list will be executed.'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'mvn clean verify -Dtags="feature:Reporting or release:sprint-2"\nmvn clean verify -Dtags="feature:Reporting or release:sprint-2"\n')),(0,i.kt)("p",null,"When using Cucumber, we need to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"cucumber.options")," property to indicate which scenarios should be executed. For example, the following command runs all of the Cucumber scenarios with the ",(0,i.kt)("inlineCode",{parentName:"p"},"@sprint-2"),' tag":'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'mvn clean verify -Dcucumber.options="--tags=@sprint-2"\n')),(0,i.kt)("h2",{id:"excluding-unrelated-requirements"},"Excluding Unrelated Requirements"),(0,i.kt)("p",null,"By default, when you use the ",(0,i.kt)("inlineCode",{parentName:"p"},"tags")," option, Serenity will filter your requirements as best it can to report only the requirements that are relevant to the specified tag."),(0,i.kt)("p",null,"Requirements filtering only happens if you specify the ",(0,i.kt)("inlineCode",{parentName:"p"},"tags")," option. So this will produce a full set of requirements in the ",(0,i.kt)("em",{parentName:"p"},"Requirements")," page."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'mvn clean verify -Dcucumber.options="--tags @sprint-2"\n')),(0,i.kt)("p",null,"But this will report only the requirements that are related to the executed tests."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'mvn clean verify -Dcucumber.options="--tags @sprint-2" -Dtags=sprint-2\n')),(0,i.kt)("p",null,"If you have already run the full set of tests, you can also produce a filtered aggregate report, in which case you don't need to provide the ",(0,i.kt)("inlineCode",{parentName:"p"},"cucumber.options")," property:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"mvn serenity:aggregate -Dtags=sprint-2\n")))}p.isMDXComponent=!0}}]);