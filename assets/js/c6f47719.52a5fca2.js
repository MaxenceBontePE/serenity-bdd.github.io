"use strict";(self.webpackChunkserenity_users_guide=self.webpackChunkserenity_users_guide||[]).push([[8368],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>g});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=r.createContext({}),u=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},d=function(e){var n=u(e.components);return r.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},l=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),l=u(t),g=i,y=l["".concat(c,".").concat(g)]||l[g]||p[g]||o;return t?r.createElement(y,a(a({ref:n},d),{},{components:t})):r.createElement(y,a({ref:n},d))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=l;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var u=2;u<o;u++)a[u]=t[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}l.displayName="MDXCreateElement"},7305:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=t(7462),i=(t(7294),t(3905));const o={id:"maven",title:"Using Maven with Serenity",sidebar_position:3},a="Integrating Serenity BDD into a Maven project",s={unversionedId:"guide/maven",id:"guide/maven",isDocsHomePage:!1,title:"Using Maven with Serenity",description:"Maven is the recommended build tool for Serenity BDD.",source:"@site/docs/guide/maven.md",sourceDirName:"guide",slug:"/guide/maven",permalink:"/docs/guide/maven",editUrl:"https://github.com/serenity-bdd/serenity-bdd.github.io/blob/master/docs/guide/maven.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"maven",title:"Using Maven with Serenity",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Creating A New Project",permalink:"/docs/guide/getting_started"},next:{title:"Step Libraries",permalink:"/docs/guide/step_libraries"}},c=[{value:"Serenity JUnit 4 Dependencies",id:"serenity-junit-4-dependencies",children:[]},{value:"Serenity JUnit 5 Dependencies",id:"serenity-junit-5-dependencies",children:[]},{value:"Serenity Cucumber Dependencies",id:"serenity-cucumber-dependencies",children:[]},{value:"Cucumber with JUnit 4 Dependencies",id:"cucumber-with-junit-4-dependencies",children:[]},{value:"Cucumber with JUnit 5 Dependencies",id:"cucumber-with-junit-5-dependencies",children:[]},{value:"Screenplay",id:"screenplay",children:[]},{value:"The Serenity Maven Plugin",id:"the-serenity-maven-plugin",children:[]},{value:"Checking Gherkin feature files",id:"checking-gherkin-feature-files",children:[]}],u={toc:c};function d(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"integrating-serenity-bdd-into-a-maven-project"},"Integrating Serenity BDD into a Maven project"),(0,i.kt)("p",null,"Maven is the recommended build tool for Serenity BDD."),(0,i.kt)("p",null,"You can add Serenity BDD to an existing Maven project by adding the corresponding dependencies to your ",(0,i.kt)("inlineCode",{parentName:"p"},"pom.xml")," file. All Serenity BDD projects need the following core dependency:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"<dependency>\n    <groupId>net.serenity-bdd</groupId>\n    <artifactId>serenity-core</artifactId>\n    <version>${serenity.version}</version>\n    <scope>test</scope>\n</dependency>\n")),(0,i.kt)("p",null,"You will also need a test runner, which will usually be either JUnit 4, JUnit 5 or Cucumber."),(0,i.kt)("h2",{id:"serenity-junit-4-dependencies"},"Serenity JUnit 4 Dependencies"),(0,i.kt)("p",null,"To use JUnit 4 you will need the following dependency:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"<dependency>\n    <groupId>net.serenity-bdd</groupId>\n    <artifactId>serenity-junit</artifactId>\n    <version>${serenity.version}</version>\n    <scope>test</scope>\n</dependency>\n")),(0,i.kt)("h2",{id:"serenity-junit-5-dependencies"},"Serenity JUnit 5 Dependencies"),(0,i.kt)("p",null,"To use JUnit 5 you will need the following dependency:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"<dependency>\n    <groupId>net.serenity-bdd</groupId>\n    <artifactId>serenity-junit5</artifactId>\n    <version>${serenity.version}</version>\n    <scope>test</scope>\n</dependency>\n")),(0,i.kt)("p",null,"You will also need the JUnit 5 dependencies, e.g."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"<dependency>\n    <groupId>org.junit.jupiter</groupId>\n    <artifactId>junit-jupiter-api</artifactId>\n    <version>${junit5.version}</version>\n    <scope>test</scope>\n</dependency>\n<dependency>\n    <groupId>org.junit.jupiter</groupId>\n    <artifactId>junit-jupiter-engine</artifactId>\n    <version>${junit5.version}</version>\n    <scope>test</scope>\n</dependency>\n")),(0,i.kt)("h2",{id:"serenity-cucumber-dependencies"},"Serenity Cucumber Dependencies"),(0,i.kt)("p",null,"For Cucumber you will need the following dependency:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"<dependency>\n    <groupId>net.serenity-bdd</groupId>\n    <artifactId>serenity-cucumber</artifactId>\n    <version>${serenity.version}</version>\n    <scope>test</scope>\n</dependency>\n")),(0,i.kt)("p",null,"Since Serenity relies on a specific version of the Cucumber APIs, we recommend using the same version of the Cucumber libraries."),(0,i.kt)("p",null,"Cucumber requires a test runner, either JUnit 4 or JUnit 5."),(0,i.kt)("h2",{id:"cucumber-with-junit-4-dependencies"},"Cucumber with JUnit 4 Dependencies"),(0,i.kt)("p",null,"To use JUnit 4 you will need the following dependency:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"<dependency>\n    <groupId>io.cucumber</groupId>\n    <artifactId>cucumber-junit</artifactId>\n    <version>${cucumber.version}</version>\n    <scope>test</scope>\n</dependency>\n<dependency>\n    <groupId>org.junit.platform</groupId>\n    <artifactId>junit-vintage-engine</artifactId>\n    <version>${junit5.version}</version>\n    <scope>test</scope>\n</dependency>\n")),(0,i.kt)("h2",{id:"cucumber-with-junit-5-dependencies"},"Cucumber with JUnit 5 Dependencies"),(0,i.kt)("p",null,"To use JUnit 5 you will need the following dependency:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"<dependency>\n    <groupId>io.cucumber</groupId>\n    <artifactId>cucumber-junit-platform-engine</artifactId>\n    <version>${cucumber.version}</version>\n    <scope>test</scope>\n</dependency>\n<dependency>\n    <groupId>org.junit.platform</groupId>\n    <artifactId>junit-platform-suite</artifactId>\n    <version>${junit-platform.version}</version>\n    <scope>test</scope>\n</dependency>\n")),(0,i.kt)("p",null,"See cucumber-junit-platform-engine documentation on using junit-platform-suite to pilot cucumber: ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/cucumber/cucumber-jvm/tree/main/junit-platform-engine#suites-with-different-configurations"},"https://github.com/cucumber/cucumber-jvm/tree/main/junit-platform-engine#suites-with-different-configurations"),", and ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/serenity-bdd/serenity-cucumber-starter"},"https://github.com/serenity-bdd/serenity-cucumber-starter")," for a running example."),(0,i.kt)("h2",{id:"screenplay"},"Screenplay"),(0,i.kt)("p",null,"If you are using the Screenplay pattern, you will also need the Screenplay dependencies:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"<dependency>\n    <groupId>net.serenity-bdd</groupId>\n    <artifactId>serenity-screenplay</artifactId>\n    <version>${serenity.version}</version>\n    <scope>test</scope>\n</dependency>\n<dependency>\n    <groupId>net.serenity-bdd</groupId>\n    <artifactId>serenity-rest-assured</artifactId>\n    <version>${serenity.version}</version>\n</dependency>\n<dependency>\n    <groupId>net.serenity-bdd</groupId>\n    <artifactId>serenity-ensure</artifactId>\n    <version>${serenity.version}</version>\n    <scope>test</scope>\n</dependency>\n<dependency>\n    <groupId>net.serenity-bdd</groupId>\n    <artifactId>serenity-screenplay-webdriver</artifactId>\n    <version>${serenity.version}</version>\n    <scope>test</scope>\n</dependency>\n")),(0,i.kt)("h2",{id:"the-serenity-maven-plugin"},"The Serenity Maven Plugin"),(0,i.kt)("p",null,"If you want to generate the Serenity reports whenever you run ",(0,i.kt)("inlineCode",{parentName:"p"},"mvn verify"),", you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"serenity-maven-plugin")," to do that:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"<plugin>\n    <groupId>net.serenity-bdd.maven.plugins</groupId>\n    <artifactId>serenity-maven-plugin</artifactId>\n    <version>${serenity.version}</version>\n    <configuration>\n      <tags>${tags}</tags>\n    </configuration>\n    <executions>\n        <execution>\n            <id>serenity-reports</id>\n            <phase>post-integration-test</phase>\n            <goals>\n                <goal>aggregate</goal>\n                <goal>check</goal>\n            </goals>\n        </execution>\n    </executions>\n</plugin>\n")),(0,i.kt)("p",null,"By default, the ",(0,i.kt)("inlineCode",{parentName:"p"},"aggregate")," goal will NOT fail the build if there are test failures - it will simply generate the reports. This way you can aggregate multiple report sets and then check for failures at the end using ",(0,i.kt)("inlineCode",{parentName:"p"},"mvn serenity:check"),"."),(0,i.kt)("h2",{id:"checking-gherkin-feature-files"},"Checking Gherkin feature files"),(0,i.kt)("p",null,"Some errors in Gherkin feature files can cause the Serenity reports to behave unpredictably. For this reason, the following rules should be followed when working with Cucumber and Serenity:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Scenario names should be unique within a feature file")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Scenario, Rule and Feature names should not be blank")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Feature names should be unique wherever possible. In particular features with the same name, inside directories with identical names, will not appear correctly in the Serenity reports."),(0,i.kt)("p",{parentName:"li"},"You can check these rules before you run the full test by calling the ",(0,i.kt)("inlineCode",{parentName:"p"},"check-gherkin")," goal, e.g."))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"mvn serenity:check-gherkin  \n")),(0,i.kt)("p",null,"You can ensure that your feature files are correctly configured before kicking off your tests by binding the ",(0,i.kt)("inlineCode",{parentName:"p"},"check-gherkin")," goal to the ",(0,i.kt)("inlineCode",{parentName:"p"},"process-test-resources")," lifecycle phase, as shown here:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"<plugin>\n    <groupId>net.serenity-bdd.maven.plugins</groupId>\n    <artifactId>serenity-maven-plugin</artifactId>\n    <version>${serenity.version}</version>\n    <configuration>\n      <tags>${tags}</tags>\n    </configuration>\n    <executions>\n        <execution>\n            <id>check-feature-files</id>\n            <phase>process-test-resources</phase>\n            <goals>\n                <goal>check-gherkin</goal>\n            </goals>\n        </execution>\n        <execution>\n            <id>serenity-reports</id>\n            <phase>post-integration-test</phase>\n            <goals>\n                <goal>aggregate</goal>\n            </goals>\n        </execution>\n    </executions>\n</plugin>\n")))}d.isMDXComponent=!0}}]);