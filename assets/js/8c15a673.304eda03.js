"use strict";(self.webpackChunkserenity_users_guide=self.webpackChunkserenity_users_guide||[]).push([[6588],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>p});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),h=u(n),p=i,m=h["".concat(l,".").concat(p)]||h[p]||c[p]||a;return n?r.createElement(m,s(s({ref:t},d),{},{components:n})):r.createElement(m,s({ref:t},d))}));function p(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,s=new Array(a);s[0]=h;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:i,s[1]=o;for(var u=2;u<a;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},8579:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var r=n(7462),i=(n(7294),n(3905));const a={id:"living_documentation",title:"Living Documentation",sidebar_position:1},s=void 0,o={unversionedId:"reporting/living_documentation",id:"reporting/living_documentation",isDocsHomePage:!1,title:"Living Documentation",description:"What is Living documentation?",source:"@site/docs/reporting/living-documentation.md",sourceDirName:"reporting",slug:"/reporting/living_documentation",permalink:"/docs/reporting/living_documentation",editUrl:"https://github.com/serenity-bdd/serenity-bdd.github.io/blob/master/docs/reporting/living-documentation.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"living_documentation",title:"Living Documentation",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Making Screenplay Assertions with Serenity Ensure",permalink:"/docs/screenplay/screenplay_ensure"},next:{title:"Filtering Execution and Reports with Tags",permalink:"/docs/reporting/filtering_reports"}},l=[{value:"What is Living documentation?",id:"what-is-living-documentation",children:[]},{value:"Living Documentation and Test Reporting",id:"living-documentation-and-test-reporting",children:[{value:"Timing",id:"timing",children:[]},{value:"Authors",id:"authors",children:[]},{value:"Audience and Language",id:"audience-and-language",children:[]},{value:"Purpose and scope",id:"purpose-and-scope",children:[]},{value:"Living Documentation and other types of tests",id:"living-documentation-and-other-types-of-tests",children:[]}]},{value:"The Requirements Hierarchy",id:"the-requirements-hierarchy",children:[{value:"An expanded requirements tree",id:"fig-requirements-expanded",children:[]}]},{value:"The Requirement description",id:"fig-requirements-description",children:[{value:"Adding images to the requirement description",id:"adding-images-to-the-requirement-description",children:[]}]},{value:"The Test Results tab",id:"the-test-results-tab",children:[]},{value:"Functional Coverage",id:"functional-coverage",children:[{value:"Test Results",id:"test-results",children:[]}]},{value:"Feature Overviews",id:"feature-overviews",children:[{value:"Enhanced Feature Documentation",id:"enhanced-feature-documentation",children:[]}]},{value:"Adding additional evidence",id:"adding-additional-evidence",children:[]},{value:"Common Requirements Structures",id:"common-requirements-structures",children:[{value:"Goals, Capabilities and Features",id:"goals-capabilities-and-features",children:[]},{value:"Themes and Epics",id:"themes-and-epics",children:[]},{value:"User Stories",id:"user-stories",children:[]}]},{value:"Configuring your requirements structure in Serenity BDD",id:"configuring-your-requirements-structure-in-serenity-bdd",children:[{value:"Requirements Hierarchies for JUnit Tests",id:"requirements-hierarchies-for-junit-tests",children:[]},{value:"Requirements Hierarchies for Cucumber",id:"requirements-hierarchies-for-cucumber",children:[]},{value:"Requirements Hierarchies for JBehave",id:"requirements-hierarchies-for-jbehave",children:[]}]}],u={toc:l};function d(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,r.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"what-is-living-documentation"},"What is Living documentation?"),(0,i.kt)("p",null,"Serenity BDD is more than a library that generates test reports. That is, while you can use Serenity BDD to produce great test reports just fine, the real goal of Serenity BDD is to produce ",(0,i.kt)("em",{parentName:"p"},"living documentation")," for your product."),(0,i.kt)("p",null,'But what do we mean by "living documentation"? Living Documentation is a concept that comes from the world of Behavior Driven Development. It is closely related to the idea of Executable Specifications. Living documentation is, as the name suggests, both ',(0,i.kt)("em",{parentName:"p"},"documentation"),", and ",(0,i.kt)("em",{parentName:"p"},"living"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"It is ",(0,i.kt)("em",{parentName:"li"},"documentation"),", because it describes how an application works, and what business rules it applies, in a way that normal users can understand. Well written living documentation can be used by new team members to understand what a product does, and how it works. It can be handed over to a maintenance team when the application goes into production, or it can be used as evidence for auditors to show that the application respects the relevant rules and regulations."),(0,i.kt)("li",{parentName:"ul"},"It is ",(0,i.kt)("em",{parentName:"li"},"living"),", because it is generated by the automated test suite, and is therefore by definition it is always up-to-date.")),(0,i.kt)("p",null,"In a Serenity BDD report, you can find the Living Documentation in the ",(0,i.kt)("inlineCode",{parentName:"p"},"Requirements")," tab."),(0,i.kt)("h4",{id:"fig-requirements-tab"},"Requirements Tab"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"A test report generated by Serenity",src:n(2706).Z})," "),(0,i.kt)("h2",{id:"living-documentation-and-test-reporting"},"Living Documentation and Test Reporting"),(0,i.kt)("p",null,"Living Documentation should not be confused with conventional test reporting. There are a number of important differences, and understanding these differences makes it easier to write good quality living documentation."),(0,i.kt)("h3",{id:"timing"},"Timing"),(0,i.kt)("p",null,"Conventional test reports are designed and generated fairly late in the development process, typically once features have been delivered and the automated tests written. Testers will often start preparatory work on test cases once the specifications or user stories are finalised, but test reports are still an activity that happens later rather than earlier in the development process."),(0,i.kt)("p",null,"For a team practicing BDD, on the other hand, the work on Living Documentation starts much earlier. Teams practicing BDD will work together with product owners to define acceptance criteria for the stories to be developed, and these acceptance criteria will form the basis for the automated acceptance tests ",(0,i.kt)("em",{parentName:"p"},"and")," for the living documentation that is generated with each build."),(0,i.kt)("h3",{id:"authors"},"Authors"),(0,i.kt)("p",null,"Test Reports are the responsibility of QA; testers are usually the ones who design the report structure (if any design is done) and generate the test reports."),(0,i.kt)("p",null,"Living Documentation, on the other hand, is written collaboratively by many different actors: BAs, developers, testers and product owners all play key roles in the BDD requirements discovery process, and help, together, to express the business needs in a form that can be executed as automated acceptance tests."),(0,i.kt)("h3",{id:"audience-and-language"},"Audience and Language"),(0,i.kt)("p",null,"Testers are also the primary consumers of test reports. In many projects, other team members will only ever see test report summaries or overviews."),(0,i.kt)("p",null,"Living Documentation is for the whole team, including product owners, stakeholders and users involved in the project. It describes what the application should do before a feature is implemented (in the form of pending scenarios), and demonstrates (and gives evidence) that the implemented feature behaves as expected (in the form of passing scenarios). For this reason, living documentation scenarios need to be written in business terms, in a way that is easily understandable by non-testers."),(0,i.kt)("h3",{id:"purpose-and-scope"},"Purpose and scope"),(0,i.kt)("p",null,"Produced by testers and for testers, a test report naturally has a very strong testing focus. The emphasis is primarily on knowing whether a test passes or fails, and, at a higher level, knowing what proportion of tests pass or fail."),(0,i.kt)("p",null,"Living Documentation is more like a very detailed illustrated user manual. The focus is about describing what the application does, in business terms."),(0,i.kt)("p",null,"For example, a scenario in a test report might be interested in checking whether all of the countries appear in a country drop-down list on a user registration page. A scenario appearing in a living documentation report would be more interested in describing the user registration process as a whole, and demonstrating how it works for different types of users, and what business constraints or limitations apply to the choice of countries."),(0,i.kt)("p",null,"These differences can be summed up in the following table:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"th"},"Test Reports")),(0,i.kt)("th",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"th"},"Living Documentation")))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Produced after development is done"),(0,i.kt)("td",{parentName:"tr",align:null},"Written before development starts")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Written by testers"),(0,i.kt)("td",{parentName:"tr",align:null},"Written collaboratively by the whole team")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Written mostly for testers"),(0,i.kt)("td",{parentName:"tr",align:null},"For the whole team and beyond")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Reports on passing and failing tests"),(0,i.kt)("td",{parentName:"tr",align:null},"Describes worked examples of functionality")))),(0,i.kt)("h3",{id:"living-documentation-and-other-types-of-tests"},"Living Documentation and other types of tests"),(0,i.kt)("p",null,"Living Documentation is designed to work together with lower-level unit and integration testing to provide a high degree of confidence in the quality of the application. Living documentation will generally focus on key examples of positive and negative paths through the application, and leave the more exhaustive testing to the unit test layers."),(0,i.kt)("p",null,"In highly regulated environments, on the other hand, living documentation will often be more exhaustive and detailed, as it may be used for audits or regulatory reporting."),(0,i.kt)("p",null,'In Serenity, living documentation can be "layered", so that the most important details are presented first, and the more exhaustive scenarios presented further down.'),(0,i.kt)("p",null,"At the heart of this reporting is the ",(0,i.kt)("em",{parentName:"p"},"Requirements")," tab. Let's see what you will find there."),(0,i.kt)("h1",{id:"the-requirements-view"},"The Requirements view"),(0,i.kt)("p",null,"Serenity's requirements view is a core part of the Serenity reporting approach, and understanding how it works is key to producing great living documentation. The Serenity living documentation goes far beyond traditional test reporting: in mature BDD teams working in large organisations, stakeholders regularly use the living documentation produced by Serenity not only to validate and document new releases, but also to explain and document how the system works."),(0,i.kt)("p",null,"Let's look at the various parts of this report, to better understand you might configure them in your own projects."),(0,i.kt)("h2",{id:"the-requirements-hierarchy"},"The Requirements Hierarchy"),(0,i.kt)("p",null,"In Serenity, requirements are organised in a hierarchy. You can see this hierarchy in the tree structure in the bottom part of the Requirements tab shown in ",(0,i.kt)("a",{parentName:"p",href:"#fig-requirements-tab"},"A test report generated by Serenity"),"."),(0,i.kt)("p",null,"There are a few ideas of how you can organise this hierarchy at the end of this chapter. You can break your requirements down by high level capabilities down into more granular features, or it might make more sense to organise things in terms of some cross-cutting business functionality."),(0,i.kt)("p",null,"In all cases, the requirements hierarchy is implemented as a nested directory structure (for Cucumber or JBehave) or as a package structure (for JUnit)."),(0,i.kt)("p",null,"The Requirements hierarchy can be any depth, though it can be confusing if different branches have different depths. At the bottom level are the feature files (for Cucumber), story files (for JBehave) or test classes (for JUnit). The directories that contain these files represent the higher level requirements."),(0,i.kt)("p",null,"You can get an idea of the full directory structure (in the ",(0,i.kt)("inlineCode",{parentName:"p"},"src/test/features")," directory) for the project shown in ",(0,i.kt)("a",{parentName:"p",href:"#fig-requirements-tab"},"A test report generated by Serenity")," here:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\u251c\u2500\u2500 customer_due_diligence\n\u2502   \u251c\u2500\u2500 customer_acceptance_policy\n\u2502   \u2502   \u251c\u2500\u2500 business_activities.feature\n\u2502   \u2502   \u251c\u2500\u2500 country_risk_ratings.feature\n\u2502   \u2502   \u251c\u2500\u2500 customer_risk_profiles.feature\n\u2502   \u2502   \u251c\u2500\u2500 enhanced_due_diligence.feature\n\u2502   \u2502   \u251c\u2500\u2500 non-face-to-face-customers.feature\n\u2502   \u2502   \u251c\u2500\u2500 pep.feature\n\u2502   \u2502   \u251c\u2500\u2500 readme.md\n\u2502   \u2502   \u2514\u2500\u2500 standard_due_diligence.feature\n\u2502   \u251c\u2500\u2500 customer_identification\n\u2502   \u2502   \u2514\u2500\u2500 readme.md\n\u2502   \u251c\u2500\u2500 ongoing_monitoring\n\u2502   \u2502   \u2514\u2500\u2500 readme.md\n\u2502   \u2514\u2500\u2500 readme.md\n\u251c\u2500\u2500 readme.md\n\u2514\u2500\u2500 reporting_controls\n    \u251c\u2500\u2500 eligibility\n    \u2502   \u251c\u2500\u2500 cftc_eligibility.feature\n    \u2502   \u251c\u2500\u2500 mifid2_eligibility.feature\n    \u2502   \u2514\u2500\u2500 readme.md\n    \u251c\u2500\u2500 readme.md\n    \u2514\u2500\u2500 reportability\n        \u251c\u2500\u2500 readme.md\n        \u2514\u2500\u2500 reportable_state.feature\n")),(0,i.kt)("p",null,"If you expand the nodes of the requirement tree view, you will get a similar structure in the Requirements tab (see ",(0,i.kt)("a",{parentName:"p",href:"#fig-requirements-expanded"},"An expanded requirements tree"),")."),(0,i.kt)("h3",{id:"fig-requirements-expanded"},"An expanded requirements tree"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"An expanded requirements tree",src:n(2934).Z})),(0,i.kt)("p",null,"The tree view also gives you some useful extra information. The little icon on the right hand side of the requirements line tells you the overall result of any executed tests (requirements with no implemented tests are marked as pending). The tree also tells you how many sub-requirements there are underneath each requirement."),(0,i.kt)("h2",{id:"fig-requirements-description"},"The Requirement description"),(0,i.kt)("p",null,"The requirements description is the first thing you see on a typical living documentation report - you can see it below in the white box at the top of the report:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"The Requirements Description",src:n(4480).Z})),(0,i.kt)("p",null,"This text is a bit like an introduction to a book or to a chapter in a book - it should present the application or high level functionality that is described in detail in the rest of the report."),(0,i.kt)("p",null,"You can add this introductory text at any level of your requirements hierarchy by adding a ",(0,i.kt)("inlineCode",{parentName:"p"},"readme.md")," file at the appropriate level of your requirements hierarchy. A well-documented set of living documentation will have ",(0,i.kt)("inlineCode",{parentName:"p"},"readme.md")," files at each level of the hierarchy, to explain the purpose and background of each functional area in the application. You can see these files in the directory structure we looked at in the previous section."),(0,i.kt)("p",null,"Markdown (",(0,i.kt)("a",{parentName:"p",href:"https://daringfireball.net/projects/markdown/"},"https://daringfireball.net/projects/markdown/"),") is a convenient lightweight format that you can use to make your living documentation more readable. The markdown used in the report shown above looks like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-markdown"},"## Regulatory Reporting Controls\n\nThis project illustrates Serenity's living documentation capabilities, through a set of requirements for an imaginary investment bank.\n * The _Customer Due Diligence_ requirements, which are partially implemented (a mixture of pending and passing requirements), and\n * The _Reporting controls_, which contain a variety of failing acceptance tests.\n")),(0,i.kt)("p",null,"For any ",(0,i.kt)("inlineCode",{parentName:"p"},"readme.md")," in a nested requirements directory (so any ",(0,i.kt)("inlineCode",{parentName:"p"},"readme.md")," file other than the top level one), the first line should contain the name of the requirement. An example for the ",(0,i.kt)("em",{parentName:"p"},"Customer Due Diligence")," capability is shown below:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-markdown"},'## Customer Due Diligence\n\nBanks are required to "have in place adequate policies, practices and procedures that promote high ethical and professional standards and prevent the bank from being used, intentionally or unintentionally, by criminal elements".\n\nCertain key elements should be included by banks in the design of KYC programmes. Such essential elements should start from the banks\u2019 risk management and control procedures and should include\n\n1) customer acceptance policy,\n2) customer identification, and\n3) on-going monitoring of high risk accounts\n')),(0,i.kt)("h3",{id:"adding-images-to-the-requirement-description"},"Adding images to the requirement description"),(0,i.kt)("p",null,"You can also include images in the ",(0,i.kt)("inlineCode",{parentName:"p"},"readme.md")," files. By default, Serenity will copy any files in the ",(0,i.kt)("inlineCode",{parentName:"p"},"src/test/resources/assets")," directory into the ",(0,i.kt)("inlineCode",{parentName:"p"},"target/site/serenity/assets")," directory when it generates the reports."),(0,i.kt)("p",null,"You can place any images you want to include in your living documentation here, and then refer to them using the Markdown image syntax, like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-markdown"},"![Customer Due Diligence](assets/customer-due-diligence.png)\n")),(0,i.kt)("p",null,"This image would then appear in your reports, as illustrated here:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"A rendered application overview including an image",src:n(6581).Z})),(0,i.kt)("p",null,"If you need to override the location of the ",(0,i.kt)("inlineCode",{parentName:"p"},"assets")," directory, you can do so using the ",(0,i.kt)("inlineCode",{parentName:"p"},"report.assets.directory")," property, as shown here:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"report.assets.directory=src/test/resources/my-special-resources\n")),(0,i.kt)("p",null,"Note that the target directory in the ",(0,i.kt)("inlineCode",{parentName:"p"},"target/site/serenity")," directory will always be called ",(0,i.kt)("inlineCode",{parentName:"p"},"assets"),"."),(0,i.kt)("h2",{id:"the-test-results-tab"},"The Test Results tab"),(0,i.kt)("p",null,"The ",(0,i.kt)("em",{parentName:"p"},"Test Results")," tab (shown below) tells you about the acceptance tests that were executed for this set of requirements. Both automated and manual tests appear in the summary donut chart and table (the manual results are the same color as the equivalent automated results, but in a lighter tone)."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"The test results for a given requirement",src:n(1653).Z})),(0,i.kt)("p",null,"You can also find the full list of automated and manual test results in the bottom part of the screen."),(0,i.kt)("h2",{id:"functional-coverage"},"Functional Coverage"),(0,i.kt)("p",null,"The Functional Coverage section shows the test results broken down by functional area."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Functional Coverage",src:n(4862).Z})),(0,i.kt)("p",null,"For example, in the illustration shown above, the ",(0,i.kt)("em",{parentName:"p"},"Customer Due Diligence")," high level requirement has three child requirements:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Customer Acceptance Policies"),(0,i.kt)("li",{parentName:"ul"},"Customer Identification, and"),(0,i.kt)("li",{parentName:"ul"},"Ongoing Monitoring")),(0,i.kt)("p",null,"The functional coverage view shows the breakdown of test results for each of these child requirements. This is a useful way to get an idea of the stability or release-readiness of different parts of an application."),(0,i.kt)("h3",{id:"test-results"},"Test Results"),(0,i.kt)("p",null,"At the bottom of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Test Results")," tab, you will find the actual test results - the list of all the tests, automated and manual, that were executed for this requirement."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"The test results for a given requirement",src:n(4023).Z})),(0,i.kt)("h2",{id:"feature-overviews"},"Feature Overviews"),(0,i.kt)("p",null,"Features are an important part of the Serenity living documentation model. Features correspond to the contents of a feature file in Cucumber, a story file in JBehave, or a test case in JUnit. A feature represents a coherent piece of functionality that customers value; as a rule of thumb, a feature is something we could deploy by itself and the users would still find it useful."),(0,i.kt)("p",null,"A feature contains a set of acceptance criteria, automated scenarios that demonstrate and verify how the feature works. But often the acceptance criteria are not enough in themselves to fully explain what a feature does. We need some extra information, which we provide at the top of the feature or story file. For example, in the following feature file, we give some additional business context about the ",(0,i.kt)("em",{parentName:"p"},"Business Activities")," feature before diving into individual scenarios:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-gherkin"},"Feature: Business Activities\n\n  Some business activities are considered more risk-prone than others,\n  and certain customers and entities may pose specific risks.\n\n  Scenario Outline: The business activity risk factor for an industry\n\n  The industry risk factor is a value from 0 to 10.\n\n    When a customer works in <Business Category>\n    Then their base business activity risk factor should be <Risk Factor>\n\n    Examples:\n      | Business Category        | Risk Factor |\n      | Casino                   | 10          |\n      | Precious Metals Exchange | 9           |\n      | Currency Exchange        | 9           |\n      | Jewellery Store          | 8           |\n      | Convenience Store        | 7           |\n      | Real Estate Broker       | 6           |\n      | Software Development     | 3           |\n\n  Scenario Outline: The business activity risk factor for an established business\n      Established businessess have been in activity for 2 years or more\n\n        When a customer with a business risk factor of <Risk Factor>, such as for a <Business Category> business\n        And the business been operation for more than two years\n        Then their business activity risk rating should be <Risk Rating>\n\n        Examples:\n          | Risk Factor | Business Category    | Risk Rating |\n          | 7 or above  | Casino               | High        |\n          | 5 to 7      | Jewellery Store      | Medium      |\n          | Under 5     | Software Development | Low         |\n    ...\n")),(0,i.kt)("p",null,"The requirements page for this feature is shown in ",(0,i.kt)("a",{parentName:"p",href:"#fig-requirements-feature-overview"},"The requirements page for a feature"),"."),(0,i.kt)("p",null,"Here we see the introductory text from the top of the feature file,\nthe list of scenarios (or acceptance criteria) defined for this feature,\nand a detailed description of each scenario.\nIcons indicate whether a scenario passed or failed, and if you click on the title bar of one of the scenarios, you will go to the test results page for that scenario."),(0,i.kt)("h4",{id:"fig-requirements-feature-overview"},"The requirements page for a feature"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"The requirements page for a feature",src:n(9555).Z})),(0,i.kt)("h3",{id:"enhanced-feature-documentation"},"Enhanced Feature Documentation"),(0,i.kt)("p",null,"When you use Serenity with Cucumber, you can turn this feature overview into a rich living document that mixes business rules with examples and scenarios drawn from the acceptance tests. This lets you design a requirements overview that product owners and stakeholders can review quickly and easily, while still keeping the details on hand if they want to know more."),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Enhanced feature documentation is currently only supported for Cucumber."))),(0,i.kt)("p",null,"For example, we could improve the ",(0,i.kt)("em",{parentName:"p"},"Business Activities"),' feature overview by embedding the tables (but not the "Given..When..Then" texts which essentially act as text fixtures in this case). To do this, we use the ',(0,i.kt)("inlineCode",{parentName:"p"},"{Examples}")," tag along with the name of the scenario outline that we want to use:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-gherkin"},"Feature: Business Activities\n\n  Some business activities are considered more risk-prone than others,\n  and certain customers and entities may pose specific risks.\n  The business activity risk factor for an industry is determined by the potential risk they present to the bank. For example:\n\n  {Examples} The business activity risk factor for an industry\n")),(0,i.kt)("p",null,"When the report is generated, Serenity will include the example table from the ",(0,i.kt)("em",{parentName:"p"},"The business activity risk factor for an industry")," scenario in the feature description (see ",(0,i.kt)("a",{parentName:"p",href:"#fig-requirements-embedded-table"},"Feature Overview with Example Tables"),")."),(0,i.kt)("h4",{id:"fig-requirements-embedded-table"},"Feature Overview with Example Tables"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Example tables from the scenarios can be included in the feature overview",src:n(2847).Z})),(0,i.kt)("p",null,"If the tests for this table have been executed, the result for each row will be indicated in the table."),(0,i.kt)("p",null,"The default form (using the ",(0,i.kt)("inlineCode",{parentName:"p"},"{Examples}")," tag) will take ",(0,i.kt)("em",{parentName:"p"},"only")," the examples table from the scenario outline; if you would like the title to be displayed as well, you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"{Examples!WithTitle}")," tag instead."),(0,i.kt)("p",null,"Scenarios are generally to granular for the feature summary, and best left for the detailed section further down the page. However sometimes it makes sense to include a scenario or two in the summary. You can do this by using the ",(0,i.kt)("inlineCode",{parentName:"p"},"{Scenario}")," tag. This works for both scenarios and scenario outlines."),(0,i.kt)("h2",{id:"adding-additional-evidence"},"Adding additional evidence"),(0,i.kt)("p",null,"Sometimes the automated test results are not alone enough to satisfy stakeholders or auditors. We need to be able to add some extra proof that our application works as described."),(0,i.kt)("p",null,"In Serenity, you can add evidence in the form of a String or the contents of a file. For example, you might record the results of a SQL query to demonstrate that a database contains the expected results, or record the full version of a generated XML report when you only make assertions on a few key fields."),(0,i.kt)("p",null,"You can do this using the ",(0,i.kt)("inlineCode",{parentName:"p"},"Serenity.recordReportData()")," method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'    sqlQueryResult = ...\n    Serenity.recordReportData().withTitle("Database evidence").andContents(sqlQueryResult);\n')),(0,i.kt)("p",null,"This method lets you record data from a String or from a file. To get data from a file, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"fromFile()")," method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'    Path report = ...\n    Serenity.recordReportData().withTitle("Generated Report").fromFile(report);\n')),(0,i.kt)("p",null,"In both cases, this data is recorded with the test, and appears in the test results:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Adding evidence to a test result",src:n(3290).Z})),(0,i.kt)("h2",{id:"common-requirements-structures"},"Common Requirements Structures"),(0,i.kt)("p",null,"The exact organisation varies from project to project, but some common structures include:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Capabilities > Features"),(0,i.kt)("li",{parentName:"ul"},"Capabilities > Features > Stories"),(0,i.kt)("li",{parentName:"ul"},"Goals > Capabilities > Features"),(0,i.kt)("li",{parentName:"ul"},"Epics > Stories"),(0,i.kt)("li",{parentName:"ul"},"Themes > Epics > Stories")),(0,i.kt)("p",null,"A two-level requirements hierarchy works well for most projects. A small project (for example, a micro-service) might need only a short list of features. Only very large or complex projects would typically need three or more levels."),(0,i.kt)("h3",{id:"goals-capabilities-and-features"},"Goals, Capabilities and Features"),(0,i.kt)("p",null,"The aim of any software project is to help our stakeholders achieve their ",(0,i.kt)("em",{parentName:"p"},"goals")," by providing them with ",(0,i.kt)("em",{parentName:"p"},"capabilities"),". In BDD, a ",(0,i.kt)("em",{parentName:"p"},"Capability")," is something that allows users to do something that they couldn't do previously, or to do something that they could do previously, but do it more efficiently. A capability is technology-agnostic: it does not commit to a particular solution or implementation. An example of a capability might be the ability to pay online with a credit card."),(0,i.kt)("p",null,"A ",(0,i.kt)("em",{parentName:"p"},"Feature")," is a concrete solution or implementation that delivers a capability. Some possible features that deliver the capability we mentioned earlier might be to pay via PayPal, via Stripe or to pay by integrating with a merchant banking platform."),(0,i.kt)("h3",{id:"themes-and-epics"},"Themes and Epics"),(0,i.kt)("p",null,"In Scrum, an ",(0,i.kt)("em",{parentName:"p"},"Epic")," is simply a big user story, one that can't be delivered in a sprint. A ",(0,i.kt)("em",{parentName:"p"},"Theme")," is just another way to group related User Stories, though many teams use Themes as groups of related epics. (Another way to implement the original idea of themes in Serenity BDD is to use tags)."),(0,i.kt)("h3",{id:"user-stories"},"User Stories"),(0,i.kt)("p",null,'User Stories are commonly used in Agile as a way to organise work, but they are not always very useful when it comes to Living Documentation. This is because they reflect how a feature was sliced up when it was built. But once a feature is delivered, no one cares how it was broken down during the development phase - all that matters is what was delivered. That\'s why Cucumber prefers to group scenarios in Feature Files (which describe a feature). For this reason, User Stories are generally considered to be not a great way to structure living documentation. (Note that JBehave still uses the older convention of "Story Files", which were meant to contain the acceptance criteria of a given story).'),(0,i.kt)("h2",{id:"configuring-your-requirements-structure-in-serenity-bdd"},"Configuring your requirements structure in Serenity BDD"),(0,i.kt)("p",null,"You can configure the way Serenity names the different levels in your own requirements structure using the ",(0,i.kt)("inlineCode",{parentName:"p"},"serenity.requirements.types")," property. For example, if you want to describe your requirements in terms of themes, epics and stories, you would add the following to your Serenity configuration file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"serenity.requirements.types=theme,epic,story\n")),(0,i.kt)("p",null,"If you don't configure this parameter, Serenity will decide on a sensible default hierarchy. This hierarchy depends on whether you are using JUnit, Cucumber or JBehave, and on the depth of your requirements hierarchy:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"th"},"Test Framework")),(0,i.kt)("th",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"th"},"Default Hierarchy")))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"JUnit"),(0,i.kt)("td",{parentName:"tr",align:null},"capability > feature > story")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Cucumber"),(0,i.kt)("td",{parentName:"tr",align:null},"theme > capability > feature")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"JBehave"),(0,i.kt)("td",{parentName:"tr",align:null},"capability > feature > story")))),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Requirements configuration applies to the container levels, not to the feature or story files themselves. If you are using Cucumber, feature files will ",(0,i.kt)("strong",{parentName:"p"},"always")," be represented as features. If you are using JBehave, story files will ",(0,i.kt)("strong",{parentName:"p"},"always")," be represented as stories."))),(0,i.kt)("h3",{id:"requirements-hierarchies-for-junit-tests"},"Requirements Hierarchies for JUnit Tests"),(0,i.kt)("p",null,"Many teams write automated acceptance tests with Serenity BDD using JUnit. The Screenplay Pattern in particular makes it easy to write highly maintainable tests using a business-readable DSL that produces excellent living documentation."),(0,i.kt)("p",null,"JUnit acceptance tests should be organised in a package structure that reflects your requirements hierarchy. Note that this means that they may not reflect the package structure in your application, as is usually done for unit and integration tests."),(0,i.kt)("p",null,"A simple two-level hierarchy is illustrated here:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"com\n\u2514\u2500\u2500 acme\n    \u2514\u2500\u2500 myapps\n        \u2514\u2500\u2500 specs\n            \u251c\u2500\u2500 multiple_todo_lists\n            \u251c\u2500\u2500 sharing_lists\n            \u2514\u2500\u2500 simple_todo_lists\n                \u251c\u2500\u2500 AddingNewItems.java\n                \u251c\u2500\u2500 DeletingItems.java\n                \u251c\u2500\u2500 FilteringItemsByStatus.java\n                \u2514\u2500\u2500 MarkingItemsAsComplete.java\n")),(0,i.kt)("p",null,"You need to tell Serenity where to find the requirements hierarchy in your package structure, using the ",(0,i.kt)("inlineCode",{parentName:"p"},"serenity.test.root")," property. For the example shown above, the root package is ",(0,i.kt)("inlineCode",{parentName:"p"},"com.acme.myapp.specs"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"serenity.test.root=com.acme.myapp.specs\n")),(0,i.kt)("p",null,'In this case, the Serenity living documentation will treat the JUnit test cases ("Adding New Items", "Deleting Items" etc.) as Stories, and the packages directly underneath the ',(0,i.kt)("inlineCode",{parentName:"p"},"com.acme.myapp.specs"),' package ("Multiple Todo Lists", "Sharing Lists" etc.) as Features.'),(0,i.kt)("h3",{id:"requirements-hierarchies-for-cucumber"},"Requirements Hierarchies for Cucumber"),(0,i.kt)("p",null,"When you use Cucumber, Serenity expects your feature files to be stored in the ",(0,i.kt)("inlineCode",{parentName:"p"},"src/test/resources/features")," directory. Your requirements hierarchy goes directly underneath this directory:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"src\n\u2514\u2500\u2500 test\n    \u2514\u2500\u2500 resources\n        \u2514\u2500\u2500 features\n            \u251c\u2500\u2500 multiple_todo_lists\n            \u251c\u2500\u2500 sharing_lists\n            \u2514\u2500\u2500 simple_todo_lists\n                \u251c\u2500\u2500 adding_new_items.feature\n                \u251c\u2500\u2500 deleting_items.feature\n                \u251c\u2500\u2500 filtering_items_by_status.feature\n                \u2514\u2500\u2500 marking_items_as_complete.feature\n")),(0,i.kt)("p",null,"When Cucumber is used with the default configuration, the feature files always represent Features, and the directories containing the features represent Capabilities. A Feature is typically bigger than a user story, and can contain the acceptance criteria (scenarios) from several user stories."),(0,i.kt)("h3",{id:"requirements-hierarchies-for-jbehave"},"Requirements Hierarchies for JBehave"),(0,i.kt)("p",null,"When you use JBehave, Serenity expects your Story files to be stored in the ",(0,i.kt)("inlineCode",{parentName:"p"},"src/test/resources/stories")," directory. Your requirements hierarchy goes directly underneath this directory:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"src\n\u2514\u2500\u2500 test\n    \u2514\u2500\u2500 resources\n        \u2514\u2500\u2500 stories\n            \u251c\u2500\u2500 multiple_todo_lists\n            \u251c\u2500\u2500 sharing_lists\n            \u2514\u2500\u2500 simple_todo_lists\n                \u251c\u2500\u2500 adding_new_items.story\n                \u251c\u2500\u2500 deleting_items.feature\n                \u251c\u2500\u2500 filtering_items_by_status.story\n                \u2514\u2500\u2500 marking_items_as_complete.story\n")),(0,i.kt)("p",null,"By default the Story files represent stories, and the directories above them are rendered as Features."))}d.isMDXComponent=!0},4480:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/reports-overview-summary-aa4aa3e3c791d09580cdcccb96927fa0.png"},3290:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/requirements-adding-evidence-ce2811808d783b0902a5897657b20699.png"},2847:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/requirements-embedded-table-4f46e927587974e8e740bc56e58e9e72.png"},2934:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/requirements-expanded-7e236aecfcfee62feb1abcb76ac883aa.png"},9555:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/requirements-feature-overview-89200fb8fe8bf34857f60981aed40b2c.png"},4862:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/requirements-functional-coverage-stats-7967a0c657eae109167e2a658fdf16d4.png"},6581:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/requirements-overview-image-93aad9a9009ee0ebd021e3720cd24385.png"},1653:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/requirements-results-3a4c755ca30b86f7e9599cfcc726ccf8.png"},2706:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/requirements-tab-0a44842d1e6ac199079633ccf0800aed.png"},4023:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/requirements-test-results-91da05de517d4c01bbd3a10d45528c8b.png"}}]);